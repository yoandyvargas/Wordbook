{"version":3,"sources":["components/Results/index.js","components/Search/index.js","App.js","serviceWorker.js","index.js"],"names":["Results","className","this","props","word","error","pronunciation","define","map","item","index","key","definition","emoji","type","src","image_url","alt","React","Component","Search","onSubmit","searchValue","id","onClick","search","width","height","viewBox","fill","xmlns","d","stroke","strokeWidth","strokeLinecap","strokeLinejoin","random","data-name","transform","fillRule","client","require","Owlbot","wordsData","App","randomizer","result","Math","floor","input","data","then","res","results","setState","words","definitions","hasError","searcher","event","preventDefault","document","getElementById","value","replace","state","window","addEventListener","removeEventListener","href","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.f20fd4fa.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./index.css\";\n\nclass Results extends React.Component {\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"inner-container\">\n          <h1>{this.props.word}</h1>\n          <p>{this.props.error}</p>\n          <h4>{this.props.pronunciation}</h4>\n        </div>\n        <div className=\"inner-container\">\n          <ul>\n            {this.props.define.map((item, index) => (\n              <li key={index}>\n                <p>\n                  {item.definition} {item.emoji}\n                </p>\n                <p>\n                  <em>{item.type}</em>\n                </p>\n                <img src={item.image_url} alt=\"\" />\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Results;\n","import React from \"react\";\nimport \"./index.css\";\n\nclass Search extends React.Component {\n  render() {\n    return (\n      <div className=\"search\">\n        <form onSubmit={this.props.searchValue}>\n          <input type=\"text\" id=\"inputValue\"></input>\n        </form>\n        <div className=\"button one\" onClick={this.props.search}>\n          <svg\n            width=\"32\"\n            height=\"32\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <path\n              d=\"M17 17L22 22M19.5 10.75C19.5 15.5825 15.5825 19.5 10.75 19.5C5.91751 19.5 2 15.5825 2 10.75C2 5.91751 5.91751 2 10.75 2C15.5825 2 19.5 5.91751 19.5 10.75Z\"\n              stroke=\"#000\"\n              strokeWidth=\"1.5\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n            ></path>\n          </svg>\n        </div>\n        <div className=\"button two\" onClick={this.props.random}>\n          <svg\n            id=\"Layer_1\"\n            data-name=\"Layer 1\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 334 227.37\"\n          >\n            <path\n              d=\"M417,178.13l-80.56-41.82c-.15,2.26,0,4.52,0,6.77v14.14c-1.5.09-2.56.19-3.63.22-31.13.62-57.4,9.46-79.3,25.79-15.57,11.61-27.53,25.18-38.4,39.31-9.88,12.83-19.37,25.83-29.35,38.62C178,271,169.45,280.43,158.5,288.52c-12.7,9.38-27.89,14.1-45.83,14-9.89-.06-19.78,0-29.67,0v41.43c9.92,0,19.85,0,29.78,0,27.38,0,52.09-5.81,73.61-18.62,13.59-8.09,25.16-17.65,34.28-28.58,12.39-14.85,23.63-30.24,35.73-45.24,8.72-10.81,17.63-21.58,27.26-31.95a64,64,0,0,1,27.25-17.09,68.86,68.86,0,0,1,25.46-3.39c0,6.66.06,13.14,0,19.62Z\"\n              transform=\"translate(-83 -136.31)\"\n            />\n            <path\n              d=\"M417,323.35l-80.6-40.74c0,5.6,0,11.2,0,16.8v3.06c-1.66,0-2.86,0-4.05,0-15.74-.4-28.76-5.23-39.76-13.41-10-7.47-17.74-16.22-25.14-25.14-.67-.8-1.38-1.59-2.23-2.57-.53.55-.83.81-1.06,1.1-9.71,12.38-19.46,24.76-29,37.19a2.38,2.38,0,0,0,.5,2.72c5.27,4.83,10.41,9.78,16.2,14.26,18.07,14,39.7,23.3,65.78,26.25,6.08.68,12.26.89,18.64,1.34.07.93.17,1.81.17,2.69,0,5.59.05,11.19,0,16.79Z\"\n              transform=\"translate(-83 -136.31)\"\n            />\n            <path\n              d=\"M198.62,184.27c-21-16-46.33-25.41-76.61-26.52-13-.48-26-.34-39-.36v41.53c9.94,0,19.89.07,29.83,0,17.71-.17,32.61,4.6,45.21,13.72,10.08,7.31,17.91,15.87,25.34,24.67.74.87,1.5,1.73,2.3,2.64l31.24-40.16C211.1,194.81,205.21,189.29,198.62,184.27Z\"\n              transform=\"translate(-83 -136.31)\"\n              fillRule=\"evenodd\"\n            />\n          </svg>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Search;\n","import React from \"react\";\nimport Results from \"../src/components/Results\";\nimport Search from \"../src/components/Search\";\n//owlbot dictionary free public API, https://owlbot.info , installed via npm //\nvar Owlbot = require(\"owlbot-js\");\nvar client = Owlbot(\"cc79e2f4add1dac1bdd8949cbfb560bd3bc12ba5\");\n//List of words.json from https://github.com/dwyl/english-words/blob/master/words_dictionary.json //\nvar wordsData = require(\"./words.json\");\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    //States that hold information, words = actual word, pronunciation = self, define array includes type of word, definition of word, related emojis and images//\n    this.state = {\n      words: \"\",\n      pronunciation: \"\",\n      define: [],\n      hasError: \"\",\n    };\n  }\n  //On page load, randomly pull up a word //\n  componentDidMount() {\n    window.addEventListener(\"load\", this.randomizer);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"load\", this.randomizer);\n  }\n  //Provided words.json() list of words totalling 2466, generator a random word based off that json file and replace the \"input\" value to that word\n  randomizer = () => {\n    let result = Math.floor(Math.random() * 2466);\n    const newWord = wordsData.data[`${result}`];\n    let input = newWord;\n    //fetch OWLBOT dictionary API for previous randomly generated word \"input\"\n    client\n      .define(`${input}`)\n      .then((res) => {\n        return res;\n      })\n      .then(\n        (results) => {\n          this.setState({\n            words: results.word,\n            pronunciation: results.pronunciation,\n            define: results.definitions,\n            hasError: \"\",\n          });\n        },\n        (error) => {\n          if (error) {\n            this.setState({\n              hasError: \"Word could not be found, try another.\",\n              words: \"\",\n              pronunciation: \"\",\n              define: [],\n            });\n          }\n        }\n      );\n  };\n  //Search function\n  searcher = (event) => {\n    event.preventDefault();\n\n    let validateInput = document.getElementById(\"inputValue\");\n\n    if (validateInput.value === \"\") {\n      this.setState({\n        hasError:\n          \"Text field is blank. Please type a word to define or hit the random word button.\",\n        words: \"\",\n        pronunciation: \"\",\n        define: [],\n      });\n    } else {\n      //Get input from input text and remove symbols from any string inputs\n      let input = document\n        .getElementById(\"inputValue\")\n        .value.replace(/[^a-zA-Z ]/g, \"\");\n\n      client\n        .define(`${input}`)\n        .then((res) => {\n          return res;\n        })\n        .then(\n          (results) => {\n            this.setState({\n              words: results.word,\n              pronunciation: results.pronunciation,\n              define: results.definitions,\n              hasError: \"\",\n            });\n          },\n          (error) => {\n            if (error) {\n              this.setState({\n                hasError: \"Word could not be found, try another.\",\n                words: \"\",\n                pronunciation: \"\",\n                define: [],\n              });\n            }\n          }\n        );\n    }\n  };\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"header\">\n          <h1>Wordbook</h1>\n        </div>\n        <div className=\"app-container\">\n          <div className=\"header-elements\">\n            <h1>Learn a word or two.</h1>\n            <p>\n              Search for the definition of a word, or hit shuffle to learn some\n              new ones.\n            </p>\n            <Search\n              className=\"main-1\"\n              searchValue={this.searcher}\n              random={this.randomizer}\n              search={this.searcher}\n            />\n          </div>\n          <Results\n            className=\"main-2\"\n            word={this.state.words}\n            error={this.state.hasError}\n            pronunciation={this.state.pronunciation}\n            define={this.state.define}\n          />\n        </div>\n        <footer>\n          <p>\n            Made by Yoandy Vargas with OwlBot Dictionary API, learn more at{\" \"}\n            <a href=\"https://owlbot.info\">https://owlbot.info</a>.{\" \"}\n          </p>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}